import{_ as t,c as e,o as s,A as a}from"./chunks/framework.BqRd3cvK.js";const l=JSON.parse('{"title":"github-actions 使用","description":"","frontmatter":{"title":"github-actions 使用","date":"2024-09-27T00:00:00.000Z","updateDate":"2024-09-27T00:00:00.000Z","tags":["theme"]},"headers":[],"relativePath":"posts/github-actions.md","filePath":"posts/github-actions.md"}'),i={name:"posts/github-actions.md"},o=a('<h1 id="利用github-actions自动部署到github-pages" tabindex="-1">利用Github Actions自动部署到GitHub Pages <a class="header-anchor" href="#利用github-actions自动部署到github-pages" aria-label="Permalink to &quot;利用Github Actions自动部署到GitHub Pages&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">提示</p><p>值得注意的是 这里在仓库A执行<code>Github Actions</code> ,部署到仓库B的<code>GitHub Pages</code></p></div><p>根据官方文档创建需要的Github Actions脚本，这里采用提交到<code>main</code>分支时触发： 1.执行下载和打包命令 2.执行相关的推送命令(推送打包后的文件)到仓库B</p><p>由于仓库B为<code>GitHub Pages</code>，所以后续不再需要进行手动地操作，他会自动地更新你的站点。</p>',4),c=[o];function n(d,u,_,h,p,r){return s(),e("div",null,c)}const g=t(i,[["render",n]]);export{l as __pageData,g as default};
